#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=2

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
admin=$(ynh_app_setting_get --app=$app --key=admin)
member=$(ynh_app_setting_get --app=$app --key=member)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
language=$(ynh_app_setting_get --app=$app --key=language)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
current_version=$(ynh_app_setting_get --app=$app --key=version)
update_version=$(ynh_app_upstream_version "../manifest.json")
datadir=$final_path/documents/

fpm_footprint=$(ynh_app_setting_get --app=$app --key=fpm_footprint)
fpm_usage=$(ynh_app_setting_get --app=$app --key=fpm_usage)
phpversion=$(ynh_app_setting_get --app="$app" --key=phpversion)

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=11

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

# If fpm_footprint doesn't exist, create it
if [ -z "$fpm_footprint" ]; then
	fpm_footprint=medium
	ynh_app_setting_set --app=$app --key=fpm_footprint --value=$fpm_footprint
fi

# If fpm_usage doesn't exist, create it
if [ -z "$fpm_usage" ]; then
	fpm_usage=medium
	ynh_app_setting_set --app=$app --key=fpm_usage --value=$fpm_usage
fi

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
	ynh_legacy_permissions_delete_all

	ynh_app_setting_delete --app=$app --key=is_public
fi

if ! ynh_permission_exists --permission "public_space"; then
	ynh_permission_create --permission "public_space" --url "/public/" --allowed "visitors"
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=70

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading PHP-FPM configuration..." --weight=2

# If php has changed, remove the old fpm config file
# if [ "$phpversion" != $YNH_PHP_VERSION ]
# then
#     ynh_backup_if_checksum_is_different --file="/etc/php/$phpversion/fpm/pool.d/$app.conf"
#     ynh_secure_remove --file="/etc/php/$phpversion/fpm/pool.d/$app.conf"
#     if [ -f /etc/php/$phpversion/fpm/conf.d/20-$app.ini ]; then
#         ynh_secure_remove --file="/etc/php/$phpversion/fpm/conf.d/20-$app.ini"
#     fi
#     ynh_systemd_action --service_name="php${phpversion}-fpm" --action=reload
    
#     phpversion="$YNH_PHP_VERSION"
# fi

# Recreate a dedicated PHP-FPM config
ynh_add_fpm_config --usage=$fpm_usage --footprint=$fpm_footprint --package="$extra_php_dependencies"

#=================================================
# SPECIFIC UPGRADE
#=================================================
# LAUNCH UPGRADE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading app from $current_version to $update_version" --weight=3

	chown -R $app: "$final_path"

	# Remove the lock if it exists
	lock=$final_path/documents/install.lock
	if [ -f $lock ]
	then
		ynh_secure_remove $lock
	fi
	
	mkdir -p /var/log/$app/
	
	# Upgrade with CURL
	
	# Set the app as temporarily public for cURL call
	ynh_permission_update --permission="main" --add="visitors"
		
	pushd $final_path/htdocs/install/
	if php$phpversion upgrade.php $current_version $update_version > /var/log/$app/upgrade.html;  then
		ynh_print_info --message="Step 1 upgrading ended successfully"
	else
		ynh_print_warn --message="Step 1 upgrading ended with error"
	fi
	
	if php$phpversion upgrade2.php $current_version $update_version > /var/log/$app/upgrade2.html; then
		ynh_print_info --message="Step 2 upgrading ended successfully"
	else
		ynh_print_warn --message="Step 2 upgrading ended with error"
	fi
	
	charset=$(mysql -ss -N -e "SELECT default_character_set_name FROM information_schema.SCHEMATA WHERE schema_name = '$db_name'")
	if [ "$charset" != "utf8" ]
	then
		ynh_script_progression --message="Changing Database charset to utf8" --weight=5
		
		ynh_mysql_execute_as_root --database=$db_name --sql="ALTER DATABASE $db_name charset=utf8"
				
		ynh_local_curl  "/install/repair.php" \
				"force_utf8_on_tables=confirmed" > /var/log/$app/repair.html
	fi
	
	if php$phpversion step5.php $current_version $update_version > /var/log/$app/upgrade3.html; then
		ynh_print_info --message="Step 3 upgrading ended successfully"
	else
		ynh_print_warn --message="Step 3 upgrading ended with error"
	fi
	
	ynh_app_setting_set --app=$app --key=version --value=$update_version

	popd
	
	ynh_permission_update --permission="main" --remove="visitors"
fi

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

ynh_backup_if_checksum_is_different --file="$final_path/htdocs/conf/conf.php"
# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum --file="$final_path/htdocs/conf/conf.php"
chmod 644 "$final_path/htdocs/conf/conf.php"

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --weight=1

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# UPDATE THE HOOK FILE FOR USER CREATE
#=================================================

# Set system group in hooks
fhook=../hooks/post_user_create
ynh_replace_string --match_string="__APP__" --replace_string="$app" --target_file="$fhook"
ynh_replace_string --match_string="__MEMBER__" --replace_string="$member" --target_file="$fhook"
ynh_replace_string --match_string="__FINALPATH__" --replace_string="$final_path" --target_file="$fhook"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"

mkdir -p "$datadir"
chown -R $app: "$datadir"
chmod go-w $datadir

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server and PHP-FPM..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
